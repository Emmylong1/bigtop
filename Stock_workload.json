{"paragraphs":[{"text":"%md\n##Welcome to Stock Intraday Workload Tutorial Powered by IBM Power8.\n### This live tutorial will showcase three main layers of any big data solution:\n####1) Data Ingestion: Download 30 days of stock transaction data into HDFS on Power8\n####2) Data Processing & Analytics: Apache BigTop Hadoop, Spark, SparkSQL\n####3) Data Visualization  & Collaboration : Apache BigTop Zeppelin\"\n","dateUpdated":"Mar 22, 2016 10:33:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown","editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458682081365_-1296887409","id":"20160322-212801_36343636","dateCreated":"Mar 22, 2016 9:28:01 PM","dateStarted":"Mar 22, 2016 10:33:56 PM","dateFinished":"Mar 22, 2016 10:33:56 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:47","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Welcome to Stock Intraday Workload Tutorial Powered by IBM Power8.</h2>\n<h3>This live tutorial will showcase three main layers of any big data solution:</h3>\n<h4>1) Data Ingestion: Download 30 days of stock transaction data into HDFS on Power8</h4>\n<h4>2) Data Processing &amp; Analytics: Apache BigTop Hadoop, Spark, SparkSQL</h4>\n<h4>3) Data Visualization  &amp; Collaboration : Apache BigTop Zeppelin&rdquo;</h4>\n"},"focus":true},{"title":"Data Ingestion","text":"%sh\nrm stockprices.csv*\nwget -nv https://github.com/ibmsoe/bigtop/raw/master/stockprices.csv.gz-aa \nwget -nv https://github.com/ibmsoe/bigtop/raw/master/stockprices.csv.gz-ab\ncat stockprices.csv.gz-a* > stockprices.csv.gz\ngzip -d stockprices.csv.gz\nhdfs dfs -put stockprices.csv /user/zeppelin\n\n","dateUpdated":"Mar 22, 2016 10:13:19 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","title":true,"editorHide":false,"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111799_-479905451","id":"20160322-171831_1527200650","dateCreated":"Mar 22, 2016 5:18:31 PM","dateStarted":"Mar 22, 2016 10:10:37 PM","dateFinished":"Mar 22, 2016 10:12:39 PM","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:48"},{"title":"Create and Cache table of Intraday Prices Using Scala","text":"import sqlContext.implicits._\nimport java.sql.Date\n\ncase class stocklist(Symbol:String,Date:String,Time: String, Open: String, High: String, Low:String, Close: String, Volume: String)\n\nval dayactive = sc.textFile(\"hdfs:///user/zeppelin/stockprices.csv\",32)\nval Prices = dayactive.map(_.split(\",\")).map(i => stocklist(i(0), i(1), i(2), i(3),i(4),i(5), i(6), i(7))).toDF().cache\n\nPrices.registerTempTable(\"Prices\")\n\nPrices.count()\n","dateUpdated":"Mar 22, 2016 10:13:14 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","title":true,"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111799_-479905451","id":"20160322-171831_594915376","dateCreated":"Mar 22, 2016 5:18:31 PM","dateStarted":"Mar 22, 2016 10:13:14 PM","dateFinished":"Mar 22, 2016 10:13:48 PM","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:49"},{"title":"Validate Row count and Caching using SQL","text":"%sql\nselect count(*) from Prices","dateUpdated":"Mar 22, 2016 10:14:09 PM","config":{"colWidth":12,"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"keys":[{"name":"_c0","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"_c0","index":0,"aggr":"sum"}}},"editorMode":"ace/mode/sql","title":true,"enabled":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111799_-479905451","id":"20160322-171831_844600864","dateCreated":"Mar 22, 2016 5:18:31 PM","dateStarted":"Mar 22, 2016 10:13:56 PM","dateFinished":"Mar 22, 2016 10:13:58 PM","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:50"},{"title":"Map Volume over Time","text":"%sql\n-- Total Graphing Time\nselect Time, Volume, Symbol from Prices where Symbol in ('IBM','ORCL','CSCO','GOOG') group by Time, Symbol, Volume order by Time","dateUpdated":"Mar 22, 2016 10:14:17 PM","config":{"colWidth":12,"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"keys":[{"name":"Time","index":0,"aggr":"sum"}],"values":[{"name":"Volume","index":1,"aggr":"sum"}],"groups":[{"name":"Symbol","index":2,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Time","index":0,"aggr":"sum"},"yAxis":{"name":"Volume","index":1,"aggr":"sum"}}},"editorMode":"ace/mode/sql","title":true,"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111800_-481829196","id":"20160322-171831_1349394571","dateCreated":"Mar 22, 2016 5:18:31 PM","dateStarted":"Mar 22, 2016 10:14:17 PM","dateFinished":"Mar 22, 2016 10:14:21 PM","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:51"},{"text":"// Total paragraph time is the value zeppelin reports at the end of this paragraph\n// While the execution time is deltaTime1 and the scala query time 1 is deltaTime2\nimport sqlContext.implicits._\nimport java.sql.Date\ncase class stocklist(Symbol:String,Date:String,Time: String, Open: String, High: String, Low:String, Close: String, Volume: String)\n\nval startTime1 = System.nanoTime()\nval dayactive = sc.textFile(\"hdfs:///user/zeppelin/stockprices.csv\",32)\nval Prices = dayactive.map(_.split(\",\")).map(i => stocklist(i(0), i(1), i(2), i(3),i(4),i(5), i(6), i(7))).toDF().cache\nPrices.registerTempTable(\"Prices\")\nPrices.count()\n\nval startTime2 = System.nanoTime()\nval df = sqlContext.sql( \"select date, Time, Volume, Symbol from Prices where Symbol in ( 'IBM', 'ORCL', 'CSCO', 'GOOG') group by date, Time, Symbol, Volume order by date, Time limit 15700000 \")\ndf.count()\nval endTime = System.nanoTime()\nval deltaTime1 = (endTime - startTime1) / 1000000000.0\nval deltaTime2 = (endTime - startTime2) / 1000000000.0\nprint ( \"deltaTime1\", deltaTime1 )\nprint ( \"deltaTime2\", deltaTime2 )","dateUpdated":"Mar 22, 2016 10:38:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111800_-481829196","id":"20160322-171831_906718639","dateCreated":"Mar 22, 2016 5:18:31 PM","dateStarted":"Mar 22, 2016 10:34:29 PM","dateFinished":"Mar 22, 2016 10:35:28 PM","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:52","focus":true},{"text":"// Scala Query Time 2\nval startTime2 = System.nanoTime()\nval df = sqlContext.sql( \"select date, Time, Volume, Symbol from Prices where Symbol in ( 'IBM', 'ORCL', 'CSCO', 'GOOG') group by date, Time, Symbol, Volume order by date, Time limit 15700000 \")\ndf.count()\nval endTime = System.nanoTime()\nval deltaTime2 = (endTime - startTime2) / 1000000000.0","dateUpdated":"Mar 22, 2016 10:28:30 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111800_-481829196","id":"20160322-171831_946978670","dateCreated":"Mar 22, 2016 5:18:31 PM","dateStarted":"Mar 22, 2016 10:28:30 PM","dateFinished":"Mar 22, 2016 10:33:18 PM","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:53"},{"text":"// Scala Query Time 3\nval startTime2 = System.nanoTime()\nval df = sqlContext.sql( \"select date, Time, Volume, Symbol from Prices where Symbol in ( 'IBM', 'ORCL', 'CSCO', 'GOOG') group by date, Time, Symbol, Volume order by date, Time limit 15700000 \")\ndf.count()\nval endTime = System.nanoTime()\nval deltaTime2 = (endTime - startTime2) / 1000000000.0","dateUpdated":"Mar 22, 2016 5:19:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111800_-481829196","id":"20160322-171831_907659478","dateCreated":"Mar 22, 2016 5:18:31 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"// Scala Query Time 4\nval startTime2 = System.nanoTime()\nval df = sqlContext.sql( \"select date, Time, Volume, Symbol from Prices where Symbol in ( 'IBM', 'ORCL', 'CSCO', 'GOOG') group by date, Time, Symbol, Volume order by date, Time limit 15700000 \")\ndf.count()\nval endTime = System.nanoTime()\nval deltaTime2 = (endTime - startTime2) / 1000000000.0","dateUpdated":"Mar 22, 2016 5:19:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111801_-482213945","id":"20160322-171831_399690982","dateCreated":"Mar 22, 2016 5:18:31 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"// Scala Query Time 5\nval startTime2 = System.nanoTime()\nval df = sqlContext.sql( \"select date, Time, Volume, Symbol from Prices where Symbol in ( 'IBM', 'ORCL', 'CSCO', 'GOOG') group by date, Time, Symbol, Volume order by date, Time limit 15700000 \")\ndf.count()\nval endTime = System.nanoTime()\nval deltaTime2 = (endTime - startTime2) / 1000000000.0","dateUpdated":"Mar 22, 2016 5:19:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111801_-482213945","id":"20160322-171831_2052701606","dateCreated":"Mar 22, 2016 5:18:31 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:56"},{"text":"%sql\n-- SQL Query Time 1\nselect date, Time, Volume, Symbol from Prices where Symbol in ( 'IBM', 'ORCL', 'CSCO', 'GOOG') group by date, Time, Symbol, Volume order by date, Time limit 15700000","dateUpdated":"Mar 22, 2016 5:19:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111801_-482213945","id":"20160322-171831_1332143948","dateCreated":"Mar 22, 2016 5:18:31 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:57"},{"dateUpdated":"Mar 22, 2016 5:19:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1458667111801_-482213945","id":"20160322-171831_927058190","dateCreated":"Mar 22, 2016 5:18:31 PM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:58","focus":true}],"name":"Stock_workload","id":"2BGEBG8GP","angularObjects":{"2BDMCGSBY":[],"2BEG1H1XB":[],"2BG37NEC3":[],"2BH7NQWFM":[],"2BG7QHFXD":[]},"config":{"looknfeel":"default"},"info":{}}